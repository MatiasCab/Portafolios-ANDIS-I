Que es el diseño?	-Es el <b>proceso</b> de definir:<br>+Arquiectura<br>+Componentes<br>+Interfases<br>+Otras caracteristicas de sistema/componente<br>-Y el <b>resultado</b> de ese proceso.
Que es un sistema?	Es una entidad logica, que tiene un conjunto de responsabilidades u objetivos y consiste de hardware, software o ambos.
Que es un subsistema?	-Un sistema que es parte de un sistema mayor<br>-Tiene una interfaz bien definida
Que es un componente?	-Culquier pieza de software o hardware que tenga definido un rol claro.<br>-Un componente puede ser aislado, permitiendo que se reemplace con un componente diferente que tenga un fcuncion equivalente.<br>-Muchos componentes estan diseñados para ser reutilizables.<br>-Reciprocamente, otros realizan funciones con un proposito especial.
Que es un modulo?	-Un conpoentes defiido a nivel de lenguaje de programacion<br>-Pakage / Namespace
Cual es el proceso de diseño?	-Diseño arquitectonico: Se define la arquitectura.<br>-Especificacion abstracta: Se especifican los subsistemas. Cada subsistema realiza un serviico importante<br>&nbsp; &nbsp; &nbsp; &nbsp;+Contiene objetos altamente acoplados.<br>&nbsp; &nbsp; &nbsp; &nbsp;+Relativamente independiente de otros subsistemas<br>&nbsp; &nbsp; &nbsp; &nbsp;+Generalmente se descompone en modulos aunque se puede descomponer en subsistemas mas pequeños.<br>-Diseño de interfaz: Se describen las interfaces de los subsistemas.<br>-Diseño de los componentes: Se descompone cada subsistema en componentes.
Cuales son los principios de diseño?	-Dividir y conquistar: Tratar con algo grande de entrada es normalmente mucho mas dificil que si se hace con cosas mas pequeñas.<br>-Incrementar la choesion: Todo lo que sea posible. Un subsistema o modulo tiene un alto grado de cohesion si mantiene juntas las cosas que estan relacionadas y afuera las restantes.<br>-Reducir el acoplamiento: Todo lo que sea posible . El acoplamiento ocurre cuando existe interdependiencia entre un modulo y otro.<br>-Mantener el nivel de abstraccion tan alto como sea posible. Asegurese que el diseño aculte o difiera consideraciones de detalle, reduciendo por tanto la complejidad.<br>-Incrementar la reusabilidad donde sea posible. Diseñe los variados aspectos de sus sistema de tal forma que pueda ser usado nuevamente en otros contextos. Reutilizacion de los diseños y codigos existentes donde sea posible.<br>-Diseñe para ser flexible. Activamente anticipe los cambios que el diseño pueda tener en el futuro, y prepararse para ello.<br>-Anticipe la obsolencia. Planifique los cambios en la tecnologia o el entrono de tal manera que el software continue ejecutandose o sea facilmente cambiado. Ej: Diseñar pantallas responsive.
Que es la cohesion,&nbsp; cual es su objetivo, y cuales son sus ventajas?	"-Es cuando: Un subsistema o modulo mantiene ""unidas"" cosas que estan relacionadas entre eelas y mantiene fuera el resto. Un modulo cohesivo lleva&nbsp; acabo una sola tarea dentro un procedimeinto de software.<br>-ObjetivO: Diseñar servicios robustos y altamente cohesivos cuyos elementos esten fuerte y genuinamente relacionados entre si.<br>-Ventajas: Favorece la compresseion y el cambio de los sistemas.<br>En resumen: Se debe maximizar la cohesion."
Qu es el acoplamiento?	-Es la medida de la fortaleza de la asociacion establecida por una conexion entre modlos dentro de una estructura de software.<br>+Depende de la complejidad de interconexion entre los modulos, el punto donde se realiza una entrada p referencia a un modulo y los datos a traves del interfaz-<br>+Es una medida de la interconexion entre modulos dentro de una estructura del software.<br>+Un bajo acoplameinto indica un sistema bien dividio y puede conseguirse mediante la eliminacion o reduccion de relaciones innecesarias.
Que produce el acoplamiento, y cual seria el objetvio como consecuencia?	-Se produce una situacion de acoplamienot cuando un elemnto de un diseño depende de alguna forma de otro elemente del diseño.<br>+El objetivo es conseguir un acoplameinto lo mas bajo posible.<br>+Conseguir que cada componente sea tan independiente como sea posible.
De que factores depende el acoplamiento?	-Referencia hechas de un componente a otro (invocaciones)<br>-Cantidad de datos pasados de un componente a otro (parametros)<br>-El grado de control que un compoennte tiene sobre sobre el otro (EJ: composicion entre clases)
Diga las clases de acoplamiento y describalas.	-Fuertemente acoplados.<br>+Si los modulos utilizan variables compartidad o intercambian informacion de control<br><br>-Debilmente acoplados.<br>+Garantizar que los detalles de la representacion de datos estan dentro de un componente.<br>+Interfaz con otros compoennetes mediante lista de parametros.<br>+Informacion compartida limitada a aquellos componentes que necesitan acceder a la informacion.<br>+Evitar compartir informacion de forma global.
Cuales son las distintas fases del Journey map?	1-Descubrimiento: Un cosnumidor descubre un producto (Simplemente se le informa)<br>2-Consideracion: El consumidor quiere realizar una compra (Informar a los consumidores de las caracteristicas del producto asi como los puntos fuertes)<br>3-Compra:&nbsp; El usuario ya ha tomado la decisiond e compra y decide llevarla a cabo.<br>4-Retencion: Mantener la satisfaccion del cliente.<br>5-Reomendacion: Que los clientes ayuden a mejorar la propia imagen (Las valoraciones y el boca a boca)
Que es UML?	-El lenguaje Unificado de Modelado es una familia de notaciones graficas respaldada por un unico metamodelo que ayuda a describir y diselar sistemas de software, en particular aquellos construdiso utilizando el estilo orientado a objetos.<br>-El UML es un estandar relativamente abierto controlado por el OBJECT Managment Group (OMG), un consorcio abierto de empresas que se formo para construir estandares que apoyaran la interopelabilidad de los sietmas orientados a objetos, Desde su aparicion en 1997, el UML ha unificado muchos lenguajes de modelado grafico orientados a objetos y ha sido de gran ayuda para los desarrolladores de software.<br>
Driagram a de clase, expliquelos.	-Los diagramas de clases UML son ampliamnete utilizados y describen los tipos de objetos en un sistema, asi como las relaciones estaticas entre ellos.<br>-Incluyen propiedades, operaciones y restricciones aplicables a las conexiones entre objetos.<br>-Pueden tender a volverse inchoerentes a medida que se expanden y crecen. Es mejor evitar la creacion de diagramas grandes y dividirlos en otros mas pequelos que se puedan vincular entre si mas adelante.<br>-Usando la notacion de clase simle, se puede crear rapidamnete una vision general de alto nivel de sus sistema.<br>-Es buena practica usar colores para agrupar modulos comunes. Diferentes colores en diferentes clases ayudan a anetnder al lector.
Diagrama de secuencia, epliquelos.	-Su objetivo es representar el intercambio de mensajes entre los distintos XXX del sistema para cumplir con una funcionalidad. Define, por tanto, el comportamiento dinamico del sistema de informacion.<br>-Tambien se suele construir para comprender mejor el diagrama de clases, yq ue el diagrama de secuenicamuestra como los objetos deesas clases interactuan haciendo intercambio de mensajes.
Que es el diagrama de actividad?	-Los diagramas de actividades muestran un secunecia de acciones, un flujo de trabajo que va desde un punto inicial hasta un punto final.<br>-La fibnalidad de este diagrama es modelar el workflow de una actividades a otra, pero sin tener en cunetta el paso de mensajes entre ellas.<br>-Tambien es utilizado para modelar las actividades que podemos asemejar a requistos funcionales de negocio, por lo que este diagrama tendra una influeni¿ca mayor a la hora de comprender el negocio o sus funcionalidades que en la propia implementacion. Hay que tener en cuneta que este diagrama ofrece una vision a alto nivel.<br>&nbsp; &nbsp; +Documentar los requisitos de negocio.<br>&nbsp; &nbsp; +Modelar el flujo de trabajo entre actividades o/y entre subsistemas.<br>&nbsp; &nbsp; +Comprender a alto nivel las funcionalidades del sistema de informacion.
Diagramas de paquetes, explique.	-Los diagramas de clases sirven para representar la estructura mas basica de un sistema.<br>-A medida que estos empiezan a crecer, necesitamos una forma mas practica de visualizar las relaciones y dependencias.<br>-Los diagras de paquetes nos permiten agrupar por algun concepto con un mayor nivel de abstraccion.
Diagrama de compoenentes, explique-	-Se puede ver como una agrupacion de modulos, por algun criterio.<br>-Sirve oara documentar las relaciones entre el sistema a tarves de las interfaces.
Diagrama de deploy, explique.	-Suele ser utilizado junto con el diagrama de componentes (Inluso a veces cone l diagrama de paquetes) de forma que, juntos, dan una vision genral de como estara desplegad el sistema de informacion.<br>-El diagrama de compoennets muestra que compoennets existen y como se relacionan mientras que el diagrama de despliegue es utilizado para ver como se situan estos compoennets logicos en los distintos nodos fisicos.<br>-Como practicmanhte todos los diagramas de UML, puede ser utilizado para representar aspectos genrales o muy especifiosm sinedo utilizsdo de form mas comun para aspectos generales.
Como se representa el diagrama de caso de uso y que es lo que representa?	-Es una tabla de contenido grafico para el conjuno de casos de uso.<br>-El diagrama de casos de uso muestra a los actores, os casos de uso y las relaciones entre ellos (Que actores realizan que caso de uso, y que casos de uso incluyen a otros).
"Que tipo de diagrama corresponde a esta foto?&nbsp;<img src=""paste-035b01f505d7c49d40d5f2915a8a155f04e0caf9.jpg"">"	Diagrama de caso de uso
Que describe y muestra un diagrama de clases?	-Describe los tipos de objetos en el sistema y los diversos tipos de relaciones estaticas que existen entre ellos.<br>-Muestra las rpopiedades y operaciones de una clases y las restricciones que se aplican a la forma en que los objetos estan conectados.
Para que es utilzado el termino feature en los diagramas de clase?	-Es utilizado como un termino general que abarca las propiedades (estado) y operaciones (comportamiento) de una clase.
Para que se usa la asociasion?	Se utiliza para representar dependiencia semantica.
Para que se utilizan las clases de asociacion?	-Durante el proceso de diseño, puede surgir comportamiento u otros atrubutos que no tiene un responsable claro en la asociacion, debido a esto surge la necesidad de tener una nueva clase con la informacion de la asociacion.
Cual es la referencia semantica de la agregacion&nbsp;&nbsp;en el diagrama de clases?	"-""Es parte de"".<br>-Se presenta con un rombo vacio."
Diga caracteristicas de la composicion.	-Es similar a la agregacion pero con un relacion jerarquica mas fuerte entre el objeto y las partes que lo componen.<br>-Los elementos que forman parte no tiene sentido de existencia si no es dentro del elemento que los compone.<br>-Tienen los mismos tiempo de vida entre los objetos padres y compuestos, si el padre muero, los compuestos tambien.
Para que se utiliza la dependencia?	"Se utiliza para reflejar relaciones donde una clase requiere de otra pa ra funcionar , pero esta no forma parte del estado.<br><img src=""paste-442cc0c3d02cef9750827833914e731d6ac2e915.jpg"">"
Que son los enumaradores?	Set fijo de valores que no tienen comportamiento.
Como se representan las propiedades derivadas y qeu son ¿?	"Se representan con un ""/"" y se calculaen en base a otros artibutos."
Como se representan las restricciones?	"Se representan con ""{}"""
Se necesitan representar las diferentes entidades y sus relaciones, como productos, clientes, carritos de compra y pedidos. El objetivo es la comprensión de la estructura general del sistema y la identificación de las responsabilidades de cada entidad.	Diagrama de Clase
Se quiere mostrar la interacción entre diferentes objetos y componentes durante el proceso de inicio de sesión, registro y asignación de roles/permisos. Esto permitiría a los desarrolladores entender el flujo de información y eventos en el sistema.	Diagrama de secuencia.
Se quiere representar los diferentes pasos y decisiones involucradas en un proceso empresarial, como la aprobación de una factura o la contratación de un empleado. Esto ayudaría a los stakeholders a visualizar y optimizar el flujo de trabajo.	Diagrama de actividad.
Se necesita visualizar los módulos y sus dependencias en la aplicación, como la interfaz de usuario, lógica de negocio y servicios de datos. Esto facilitaría la comprensión de la arquitectura general y la gestión de dependencias.	Diagrama de paquetes/Componentes?
Se requiere describir la estructura y las interacciones entre los componentes del CMS, como el editor de texto, el gestor de archivos y el motor de plantillas. Esto ayudaría a los desarrolladores a comprender las responsabilidades y dependencias de cada componente	Diagrama de componentes
Se requiere representar la infraestructura en la que se implementan los microservicios, incluyendo servidores, contenedores y bases de datos. Esto proporcionaría una visión clara de cómo los componentes del sistema se distribuyen y comunican entre sí.	Diagrama de deploy
Se requiere mostrar cómo los diferentes componentes del sistema interactúan para detectar, evaluar y notificar eventos de alerta. Esto permitiría a los desarrolladores comprender el flujo de información y la lógica de procesamiento de eventos en el sistema.	Diagrama de secuencia?
Se requiere representar las entidades involucradas en el juego, como jugadores, personajes, objetos y enemigos. Además, un Diagrama de Secuencia podría ser utilizado para mostrar cómo las interacciones entre jugadores y objetos del juego ocurren en tiempo real. Estos diagramas ayudarían a los desarrolladores a entender la lógica del juego y a diseñar sus componentes de manera eficiente.	Diagrama de clases
Sistema operativo: Entidad lógica que administra los recursos de hardware y software de una computadora, y proporciona servicios a las aplicaciones. Incluye tanto hardware como software y tiene un conjunto de responsabilidades y objetivos. (Guiño guiño)	Sistema
Navegador web: Aplicación de software que permite a los usuarios acceder, recuperar y visualizar documentos y otros recursos en la web. Consiste en software y tiene un conjunto de responsabilidades y objetivos.	Sistema
Microservicio de pago: Es una parte de un sistema de comercio electrónico más grande que maneja las transacciones y la lógica de pago. Tiene una interfaz definida para interactuar con otros subsistemas y es parte de un sistema mayor.	Subsistema
Compilador: Herramienta de software que traduce el código fuente escrito en un lenguaje de programación a otro lenguaje, generalmente código de máquina o lenguaje intermedio. Tiene un rol claro y puede ser reemplazado por otro compilador que tenga funcionalidad equivalente.	Componente
Biblioteca de criptografía: Conjunto de funciones y algoritmos de cifrado y descifrado que pueden ser utilizados por otros programas. Está definido a nivel de lenguaje de programación y puede ser importado e integrado en diferentes aplicaciones.	Modulo
Controlador de dispositivo: Es un software que permite que el sistema operativo y otros programas interactúen con el hardware específico. Tiene un rol claro y puede ser reemplazado por otro controlador que tenga funcionalidad equivalente.	Componente
Servidor web: Parte de un sistema de alojamiento de sitios web más grande que gestiona las solicitudes de los clientes y entrega contenido.	Subsistema
Base de datos SQL: Sirve para la gestión de bases de datos que permite a los usuarios almacenar, recuperar y gestionar información estructurada utilizando el lenguaje SQL. Consiste en software y tiene un conjunto de responsabilidades y objetivos.	Sistema
Middleware: Un middleware es una pieza de software que conecta y media entre dos aplicaciones o componentes, facilitando la comunicación entre ellos. Tiene un rol claro y puede ser reemplazado por otro middleware que tenga funcionalidad equivalente.	Componente
ORM (Object-Relational Mapping): Es una técnica de programación que permite a los desarrolladores interactuar con bases de datos relacionales utilizando objetos y clases en lugar de escribir consultas SQL. Está definido a nivel de lenguaje de programación y puede ser importado e integrado en diferentes aplicaciones	Modulo
Entorno de desarrollo integrado (IDE): Software que proporciona un entorno completo para el desarrollo de aplicaciones, incluyendo herramientas como editores de texto, depuradores y compiladores. Consiste en software y tiene un conjunto de responsabilidades y objetivos.	Sistema
Motor de renderizado: Es una parte de un navegador web o motor de juegos que se encarga de dibujar gráficos en la pantalla.	Subsistema
Procesador de texto: Es una aplicación de software que permite a los usuarios crear, editar y dar formato a documentos de texto. Consiste en software y tiene un conjunto de responsabilidades y objetivos para ayudar a los usuarios a trabajar con documentos de manera eficiente.	Sistema
Gestor de notificaciones: Es un componente de software que se encarga de gestionar las notificaciones en tiempo real en una aplicación, como alertas, mensajes y recordatorios. Está definido a nivel de lenguaje de programación y puede ser importado e integrado en diferentes aplicaciones que requieran un sistema de notificaciones.	Modulo
Gestor de ventanas: Es una parte del sistema operativo o entorno de escritorio que se encarga de organizar y gestionar las ventanas de las aplicaciones en la pantalla. Tiene una interfaz definida y es parte de un sistema mayor, siendo responsable de la interacción del usuario con las ventanas y el manejo de la pantalla.	Subsistema
