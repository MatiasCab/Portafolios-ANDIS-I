Que es una interfaz de usuario?	Es el metodo que permite interactuar a los usuarios con maquinas, aplicaciones, dispositivos, etc.
Menciona las tres carcateristicas de la usabilidad.	-Efectividad: pRecision y plenitud con que los usuarios alcanzan los objetivos deseados.<br>-Eficiencia: En los recursos empleados para llegar a la efectividad.<br>-Satisfaccion: Actitud positiva en el uso del producto y ausencia de incomodidad.
Que dicen las heuristicas de Nielsen?	Las heuristicas de Nielsen establecen que la mayor parte del tiempo las personas usan productos digitales distintos al tuyo, por lo tanto sus expectativas estan basadas en dichos productos. Los usuarios no deben preguntarse si diferentes situaciones o acciones significan lo mismo.
Nombre las heristicas de Nielsen.	-Visibilidad del estatus del sistema: No dejar al usuario pensando que esta pasando (Barra de progreso, mensajes de confirmacion, etc).<br>-Alineacion entre el sistema y el mundo real: Cuanto mas claro mejor: El sistema tiene que hablar con el usuaio en su mismo lenguaj (Imagnes claras, iconos representativos, etc).<br>-Control y libertad para el usuario: No forzar al usuario a seguir un camino determinado. Darle al usuaio la posibilidad de corregir errores, opciones de deshacer, etc.<br>-Consistencia y estandares (Mismo color de botones, etc).<br>-Reconocimeinto antes que reaccion (recordar): Mejor reconocer que obligar a recordar/memorizar acciones u objetos (Usar comboBox antes que TextBox).<br>-Prevencion de errores: Prevenir mejor que curar (Perdir confirmacion, Opcion de autocompletar, resaltar un campo que falta llenar, etc).<br>-Flexibilidad y eficiencia de uso: El sistema debe estar preparado para usuaios nuevos (flesibildad) y experimentados (eficacia).<br>-Estetica y disieño minimalista:No se debe contener informacion innecesaria.<br>-Ayudar a los usuarios con los errores: Los errores deben de ser entendibles por el usuario (Error 404)<br>-Ayuda y documentacion: Se pretende que el usuaio no deba utilizar documentacion, pero igualmente se le debe brindar al usuaio un manual de funcionamiento (FAQs, Mini tours).
Mencione y explique los 3 tipos de consitencia.	-Interna: Consistencia entre paginas o pantallas de un mismo sistema.<br>-Externa: Consistencia entre aplicaciones de una msima plataforma (Instalacion de aplicaciones en Windows).<br>-Metaforica: Es la forma de hacer intuitiva una interfaz basandose en lo que el usuaio ya conoce (ej. Calculadora, consolas de musica).
Con que aspectos se hace el rating de severidad?	-Frecuencia: ¿Es común o raro? Numero de usuaios que encuentra el problema divido el numero total de usuarios.<br>-Impacto: ¿Es facil o dificil superar este problema?<br>-Persistencia: ¿El problema es conocido y el usuario puede solucionarlo o no?
DIga la escala con la que se clasifica la severidad.	0 = No es un problema de usabilidad<br>1 = Problemas cosmeticos: no necesita ser arreglado a no ser que se cuente con tiempo extra.<br>2 = problema menor de usabilidad: baja prioridad.<br>3 = problema mayor de usabilidad: mportante de arreglar.<br>4 = catástrofe de usabilidad: imperativo arreglar.
Mencione los principios de Tognazzini.	1-Anticipacion: Las aplicaciones deben intentar anticiparse a las necesidades del usuario.<br>2-Autonomía y Control: El usuaio debe tener el control y poder moverse con autonomia por el sitio web.<br>3-Precauncion usando colores: (Pensar en los que no distinguen colores. No se be utilizar los colores como la unica forma de presentar informacion.<br>4-Consitencia: Hay que ser consitencues con los conocimentos previos y las expectiativas del usuario.<br>5-Uso de valores por defecto: Caundo tengan sentido, permitiendo cambiar su configuracion con facilidad.<br>6-Eficacia del usuario: Hay que centrase en la preoductividad del usuario.<br>7-Interfaces explorables que den libvertad al usuario. Se debe permitir que el usuaio deshag las acciones realizadas.<br>8-Ley de Fitts: Cuanto menos distancioa hay que recorrer y mayor tamaño tenga un elemento, mas facil sera interactuar con el.<br>9-Uso de estandares: Elementos familiares en la interfaz.<br>10-Se debe minimar el tiempo de espera del usuaio y mantenerlo informaco del timepo que falta.<br>11-Minimar el aprendisaje: El aprendisaje necesario debe ser minimo y el sitio web debe poder usarse desde el rpimer momento.<br>12-Uso adecuado de metaforas: Con su uso, siempre que sean apropiadas, se debe mejorar la comprension.<br>13-Protecccion del trabajo de los usuaios: Hay que aseguarse que el trabajo de los usuarios no se pierda a consecnuenia de un error.<br>14-Legibilidad: Hay que favorecer la legibilidad mediante el tamaño de fuente adecuado y suficinte contrase entre texto y fonodo<br>15-Registro de estado: Seguimeinto de las acciones de usuaios para posteriormente permitir las acciones que realiza con mas frecuencia se puedan realizra mas rapido.<br>16-Navegacion visible: Hay que evitar, o reducir al maximo, los elementos de navegacion invisible y presentarlos de forma clara.<br>
Que aspectos debe cumplir una interfaz de usuario.	-Atractiva visualmente<br>-Clara<br>-Coherente<br>-Flexible
Que es AOE?	Patron de diseño de software que se basa en la comunicacion asincronica entre componentes mediante eventos.
Cuales son los componetes de AOE?	1. Evento: Representa un suceso significativo en el sistema. <br>2. Productor de eventos: Genera y emite eventos. <br>3. Consumidor de eventos: Recibe y procesa eventos. <br>4. Bus de eventos: Canal de comunicación entre los productores y consumidores de eventos.
Cual es el flujo de trabajo de AOE?	1. El productor de eventos genera un evento y lo emite en el bus de eventos. <br>2. El bus de eventos distribuye el evento a todos los consumidores interesados.<br>&nbsp;3. Los consumidores reciben los eventos y ejecutan acciones en respuesta a ellos. <br>4. Los consumidores pueden generar nuevos eventos, que a su vez son emitidos en el bus y procesados por otros consumidores
Diga ejemplos de uso de AOE.	1. Sistemas de mensajería instantánea: Notificación de mensajes nuevos, actualización de la lista de contactos.<br>&nbsp;2. Aplicaciones IoT: Recepción de datos de sensores, control de dispositivos. <br>3. Sistemas de comercio electrónico: Procesamiento de órdenes, notificación de cambios de estado. <br>4. Integración de sistemas: Sincronización de datos entre aplicaciones
Que logra AOE?	1. La Arquitectura Orientada a Eventos es un patrón poderoso para construir sistemas flexibles, escalables. <br>2. Permite una comunicación asíncrona entre componentes mediante eventos significativos. <br>3. Su adopción requiere un diseño cuidadoso en cuanto a la estructura de eventos y la gestión de carga.
Cuales son las caracteristicas del SOA?	Servicio en lugar de Componente <br>•Interoperabilidad <br>•Bajo acoplamiento <br>•Alta abstracción
Cuales osn las ventajas y desventajas del SOA?	Ventajas de SOA: <br>• Reutilización: Los servicios pueden ser compartidos y reutilizados en diferentes aplicaciones y contextos. <br>• Interoperabilidad: Permite la integración de sistemas heterogéneos y la comunicación entre diferentes plataformas tecnológicas. <br>• Flexibilidad y modularidad: Los servicios pueden ser actualizados o reemplazados sin afectar a otros componentes del sistema.<br><br>Desventajas de SOA: <br>• Complejidad inicial: El diseño e implementación de una arquitectura SOA puede ser complejo y requerir un esfuerzo adicional.<br>• Gestión de servicios: La gestión y el monitoreo de los servicios pueden ser un desafío, especialmente en sistemas grandes con muchos servicios.
Ventajas de combinar SOA y EDA?	• Flexibilidad y reactividad<br>• Desacoplamiento<br>• Escalabilidad
Diga las carcateristicas del La arquitectura monolitica.	Aplicación desarrollada en único componente. <br>Las principales características son: <br>- Alto acoplamiento. <br>- Escalabilidad limitada. <br>- Despliegue y cambios demorados.
Diga carcateristicas de los Microservicios.	Aplicación desarrollada en servicios pequeños e independientes. <br>Las principales características son: <br>- Modularidad y desacoplamiento. <br>- Favorece la escalabilidad. <br>- Mayor complejidad en gestión.
Comparae la arquitectura monolitica con la de microservicios	"<img src=""paste-659a930bb3a6c62d9516ce34b77be9838e1f8917.jpg"">"
Mencione Pros y Contras de Cliente-Servidor.	Pros <br>● Escalable añadiendo más servidores para los clientes o más clientes para un servidor. <br>● Procesamiento y gestión de recursos centralizado, facilita control y administración de los mismos. <br>● Es posible reutilizar un mismo servidor para brindar servicios a varios clientes distintos (Ej. App Mobile y App Web.) <br><br>Contras <br>● Depende de una red para comunicar a los clientes con los servidores <br>● Gran cantidad de clientes actuando sobre un mismo servidor puede sobrecargarlo <br>● Es costoso adquirir y mantener servidores
Diga pros y contras de el modelos de capas	Pros: <br>1. Modular: Cada capa es individual y cohesiva, y se pueden trabajar de manera independiente y ser fácilmente sustituidas por diferentes implementaciones, que son altamente reutilizables. <br>2. Escalable: Se pueden agregar y sacar capas en medida de necesidad. <br><br>Contras: 1. Consumo de Recursos: Al necesitar algún medio de comunicación entre las capas, se requieren más recursos para soportarlos. <br>2. Complejidad: La necesidad de interfaces y comunicación ordenada y correcta complejiza el sistema, y puede aumentar el tiempo de desarrollo. <br>3. Fallas en Cadena: En caso de una falla de una de las capas inferiores, puede causar el colapso de todas las superiores.
Cuales son los tipos de caché que hay?	-Servidor: Se utiliza en redes de entrega de contenido o servidores proxy web<br>-Navegador:&nbsp;Almacenan localmente para que se pueda acceder a ellos más rápido<br>-Memoria:&nbsp;La memoria caché almacena ciertas partes de los datos en la RAM estática (SRAM),<br>-Disco:&nbsp;La caché de disco almacena datos que se han leído recientemente
Ventajas y desventajas de caché.	Ventajas:&nbsp;<br>-Rendimiento mejorado:&nbsp;Reduce la cantidad de tiempo que se tarda en recuperar datos<br>-Uso de ancho de banda reducido:&nbsp;Se reduce la cantidad de datos que deben transferirse entre el servidor y el cliente<br>-Carga del servidor reducida:&nbsp;Los servidores no tienen que recuperar la información de su fuente original con tanta frecuencia<br><br>Desventajas:<br>-Posible contaminacion:&nbsp;Si se llena el cache de datos inútiles puede pasar que al desbordar se pierdan datos importantes de la misma,<br>-Posibles datos inchoerentes:&nbsp;Datos incoherentes entre diferentes servidores o clientes<br>-Posibles datos obsoletos:&nbsp;Los datos del caché pueden volverse desactualizados si cambian con frecuencia (y no tienen asignado un tiempo de expiración)
Explique la ecuacion de politica de remplazo de caché.	T = m * Tm + Th + E<br><br>m =&nbsp;Tasa de fallos<br>Tm =&nbsp;Tiempo cuando hay error<br>Th =&nbsp;Latencia:&nbsp;El tiempo para hacer referencia a la caché (debe ser el mismo para los aciertos y los errores)<br>Extras =&nbsp;Varios efectos secundarios, como efectos de cola en sistemas multiprocesador
Mnecione las politicas de caché.	1-Algoritmo de Bélády<br>2-FIFO<br>3 LIFO O FILO<br>4-LRU (menos usado ahora)<br>5-MRU (mas usado ahora)
Como surge GrahpQL?	Limitaciones de las API Rest:<br><br>-UnderFetching: Se necesitan muchas llamadas a la API para poder obtener los datos  necesarios<br>+OverFetching: Se obtienen muchos datos que no son necesarios
Mencione las diferencias entre GrahpQL y API REST	-Sintaxis y estructura: GraphQL utiliza un solo endpoint y sintaxis de consulta para solicitar y recibir datos<br>-OverFetching y UnderFetching: Resuelve estos problemas haciendo consultas dinámicas.<br>-Compatibilidad: Permite realizar cambios sin afectar a los clientes existentes<br>-Rendimiento: GraphQL resulta más eficiente en escenarios complejos. REST cuando son específicos y estáticos.
Protocol Buffers:	●Serialización Eficiente <br>● Definición de interfaces <br>● Generación de código <br>● Versionado y evolución <br>● Compatibilidad con múltiples lenguajes
Quer son los patrones?	-concepto en ingeniería de software que se refiere a una solución probada y reutilizable a un problema común dentro de un contexto específico en el diseño de software<br>-Los patrones de software NOson fragmentos de código que pueden ser copiados y pegados en un programa, sino más bien guías generales que describen cómo abordar ciertos problemas y situaciones
Que ventajas tienen los patrones de código?	1. Resolver problemas comunes: Se evita reiventar la rueda.<br>2. Mejorar la comunicación entre desarrolladores<br>3. Hacer que el código sea más mantenible y flexible:
Diga la clasificacion de patrones:&nbsp;	-Patrones de Creación<br>-Patrones Estructurales<br>-Patrones de Comportamiento<br>-Patrones de Arquitectura: (MVC)<br>-Patrones de Managment: Prácticas, estrategias y técnicas que ayudan a gestionar de manera efectiva un equipo, un proyecto o una organización.
Que pasa con OCP y las variables globales/publicas?	Las variables globales/públicas, violan el principio de abierto-cerrado. Ningún módulo que dependa de una variable global puede estar cerrado contra cualquier otro módulo que pueda escribir en esa variable
Cuales son las caracteristicas de los antipatrones?	1.&nbsp;Ineficiencia: Pueden hacer que el software sea más lento o consuma más recursos de los necesarios.<br>2.&nbsp;Dificultad de mantenimiento: Hacen que el código sea más difícil de entender, modificar o extender.<br>3.&nbsp;Introducción de defectos: Pueden introducir errores o hacer que sea más probable que ocurran problemas.<br>4.&nbsp;Complejidad innecesaria: Añaden complejidad al diseño o al código sin un beneficio claro.
Cuanles son las consecuencias de LavaFlow?	• Aumento de la complejidad del código <br>• Reducción de la mantenibilidad <br>• Inflación del tamaño del código, haciendo que el software sea más difícil de entender y modificar
Cuales son las Consecuencias de Goldem Hammer?	– Soluciones ineficientes o subóptimas. <br>– Mayor costo y tiempo de desarrollo. <br>– Limitación en la innovación y adaptabilidad del proyecto.
Cuales son las consecuencias de Spaghetti Code?	• Dificultad en mantenimiento y depuración. <br>• Incremento en el riesgo de introducir errores. <br>•&nbsp;Mayor costo y tiempo de desarrollo.
Que se recomiendo para mejporar Spaghetti Code?	• Dividir el código en funciones y clases más pequeñas y coherentes. <br>• Reemplazar saltos incondicionales con estructuras de control más legibles. <br>• Mejorar la documentación y comentarios
Cuales son las consecuencias de Cut and Paste	– Dificultad en el mantenimiento y la corrección de errores. <br>– Incremento en el riesgo de inconsistencias y errores lógicos.<br>&nbsp;– Código menos legible y comprensible
Que pasa con test DFriven DFevelopment antipatron?	Los testers pueden terminar dictando cómo debería ser el software, lo que puede desviarse de lo que los usuarios realmente necesitan o quieren.
Que resuleve el singleton y cuales son las contras?	---Resuelve varios problemas: <br>• Garantiza que una clase tenga una única instancia <br>• Proporcionar un punto de acceso global a dicha instancia<br>• El objeto Singleton solo se inicializa cuando se requiere por primera vez <br>---Contras: <br>• Viola principio SRP: Genera instancias, pero también las limita <br>• Puede enmascarar un mal diseño: <br>&nbsp; &nbsp; &nbsp; &nbsp; +&nbsp;Los componentes del programa saben demasiado los unos sobre los otros. <br>&nbsp; &nbsp; &nbsp; &nbsp; + Produce acoplamiento&nbsp;<br>&nbsp; &nbsp; &nbsp; &nbsp; + Complica automatización de tests
Diga pros, contras y tipo del patron Factory Mthod.	• Pros: <br>• Evita un acoplamiento fuerte entre el creador y los objetos<br>&nbsp;• Aplica OCP y SRP para su solución<br><br>• Contras: <br>• Complejidad del código aumenta, el patrón exige la creación de clases nuevas.
Diga pros, contras y tipo del patron Builder	(Creacional)<br>• Pros: <br>• Construir objetos paso a paso, aplazar pasos de la construcción <br>• Reutilizar el mismo código de construcción al construir varias representaciones de producto<br>• Aplica SRP.<br><br>Contras:&nbsp;<br>• Complejidad del código aumenta, el patrón exige la creación de clases nuevas.
Menciones los usos y tipo de patron de Protoype.	• Cuando se busca evitar dependencia de clases concretas de objetos que se necesiten copiar. (Por ejemplo, objetos pasados por códigos de terceras personas a través de una interfaz) <br><br>• Cuando se necesitan gestionar diferentes estados o versiones de un “mismo” objeto, puede ser una alternativa a la creación de subclases <br><br>• Si la creación de un objeto es costosa, Prototype puede mejorar la eficiencia. En lugar de repetir el proceso de creación completo cada vez, se puede clonar un objeto ya creado<br><br>(Creacional)
Diga usops del Builder.	• Es especialmente útil cuando existe un objeto complejo que requiere una inicialización laboriosa, paso a paso, de muchos campos y objetos anidados <br><br>• El patrón Builder facilita la modificación y ampliación del proceso de construcción<br><br>&nbsp;• Se suele puede aplicar cuando la construcción de varias representaciones de un producto requiera de pasos similares que sólo varían en los detalles.
Diga usos de Factory Method.	• Cuando se trabaja con jerarquías de clases y se necesita crear objetos polimórficos <br>• Cuando se busca desacoplar el código entre el cliente y las clases concretas <br>• Promueve la extensibilidad del código al permitir que nuevas subclases se agreguen fácilmente para crear nuevos tipos de objetos
Que son y que facilitan los patrones estructuirales?	• Los patrones de diseño estructural son patrones de diseño que facilitan el diseño al identificar una forma sencilla de realizar relaciones entre entidades <br>• Los patrones estructurales explican cómo ensamblar objetos y clases en estructuras más grandes, a la vez que se mantiene la flexibilidad y eficiencia de estas estructuras.
Diga cuando usar el patron adapter, de que tipo es?	• Utiliza este patrón cuando quieras usar una clase existente, pero cuya interfaz no sea compatible con otra parte del código. (Estructural)
Diga cuando usar Bridge, de que tipo es?	Utiliza el patrón Bridge cuando quieras dividir y organizar una clase monolítica que tenga muchas variantes de una sola funcionalidad (por ejemplo, si la clase puede trabajar con diversos servidores de bases de datos).
Diga cuando usar Decorator, de que tipo es?	(Estructural):&nbsp;<br>• Utiliza este patrón cuando necesites asignar funcionalidades adicionales a objetos durante el tiempo de ejecución sin descomponer el código que utiliza esos objetos.<br>• Utiliza el patrón cuando no sea posible extender el comportamiento de un objeto utilizando la herencia
Diga que uso tien Facade, de que tipo es?	• Utiliza el patrón Facade cuando necesites una interfaz limitada pero directa a un ( o unos) subsistema complejos. (Estructural)
Diga uso de Proxy, de que tipo es?	• Control de acceso (proxy de protección). Es cuando quieres que únicamente clientes específicos sean capaces de utilizar el objeto de servicio, por ejemplo, cuando tus objetos son partes fundamentales de un sistema operativo y los clientes son varias aplicaciones lanzadas (incluyendo maliciosas). <br>• Solicitudes de registro (proxy de registro). Es cuando quieres mantener un historial de solicitudes al objeto de servicio. <br>• Referencia inteligente. Es cuando debes ser capaz de desechar un objeto pesado una vez que no haya clientes que lo utilicen.<br>(Estructuiral)
Que es DAO?	• Es una abstracción de la persistencia de datos y se considera más cercano al repositorio de almacenamiento, que a menudo está centrado en tablas (base de datos). <br>• En muchos casos, nuestros DAO coinciden con las tablas de la base de datos, lo que permite una forma más sencilla de enviar/recuperar datos del almacenamiento, ocultando las consultas desagradables.
Que hace Command? de que tipo es?	Transforma una solicitud en un objeto independiente con toda la<br>información sobre la solicitud.<br>Esto permite parametrizar los objetos con operaciones, la idea<br>central detrás del Patrón Command es la encapsulación de una<br>solicitud de una acción a ser llevada a cabo en nombre de un<br>objeto con los parámetros de esa acción.&nbsp;
Cuando es util observer? de que tipo es?	(Comportamiento): Cuando un objeto cambia de estado, todos sus dependientes son<br>notificados y actualizados automáticamente. Esto es útil en<br>situaciones donde un cambio en un objeto requiere cambios en<br>otros objetos, sin saber cuántos objetos necesitan ser cambiados.&nbsp;
Cuando se utiliza mediator? De que tipo es?	(Comportamiento): <br>• Se utiliza para reducir la comunicación compleja entre objetos<br>estrechamente relacionados. En lugar de que los objetos se comuniquen<br>directamente entre sí, estos objetos interactúan a través de un objeto<br>mediador central.<br><br>• Esto es útil cuando tienes un conjunto de objetos que están<br>estrechamente relacionados y que necesitan comunicarse entre sí de<br>maneras complejas. En lugar de tener un número creciente de conexiones<br>entre cada par de objetos, solo necesitas conectar cada objeto con el<br>objeto mediador.&nbsp;
Resuma como funciona mediator.	En resumen, Es utilizado para encapsular y<br>simplificar la comunicación entre varios<br>componentes en una interfaz de usuario.<br>Los componentes individuales no necesitan<br>saber cómo interactúan entre sí. En su lugar,<br>simplemente notifican al Mediador de sus<br>acciones, y el Mediador contiene la lógica<br>para gestionar cómo deben interactuar estos<br>componentes.&nbsp;
Menciona uso comiun de Observer y Mediaotr.	• Uso común:<br>– Observer: Es comúnmente usado en escenarios donde un cambio en el<br>estado de un objeto debe reflejarse automáticamente en otros objetos<br>sin que el objeto cambiado conozca qué y cómo se afectarán los otros<br>objetos (por ejemplo, modelos de datos y vistas en una aplicación GUI).<br>– Mediator: Es útil cuando un conjunto de objetos necesita interactuar de<br>maneras complejas, pero quieres evitar un esquema de comunicación<br>altamente acoplado y complicado entre ellos (por ejemplo, en un chat<br>donde varios usuarios interactúan entre sí).<br><br>• En resumen, el patrón Observer es más adecuado cuando solo<br>necesitas mantener informados a varios objetos sobre los<br>cambios en un objeto, mientras que el patrón Mediator es mejor<br>cuando necesitas facilitar una comunicación más compleja<br>entre un conjunto de objetos.&nbsp;
Diga uso de Memento, de que tipo es?	(Comportamiento)<br>Se utiliza para capturar el estado interno de un objeto en<br>un punto en el tiempo, de modo que el objeto pueda ser<br>restaurado a ese estado más tarde. Esto es útil en<br>características como los sistemas de deshacer/rehacer en<br>editores de texto, o para tomar instantáneas del estado<br>de un sistema.&nbsp;
Diga uso de Sate, de que tipo es?	(Comportamiento)<br>• Permite a un objeto cambiar su comportamiento cuando su estado<br>interno cambia.<br>• Esto puede ser útil en situaciones donde un objeto debe cambiar su<br>comportamiento de manera dinámica en tiempo de ejecución, en<br>función de ciertas condiciones.<br>• En otras palabras, el patrón State sugiere que se cree una nueva<br>clase para cada estado posible de un objeto, y que se extraiga el<br>comportamiento específico de ese estado a esa clase.&nbsp;
Diga de uso de Strategy, de que tipo es?	Permite seleccionar un algoritmo o estrategia en tiempo de<br>ejecución. En lugar de implementar un único algoritmo<br>directamente dentro de una clase, el patrón Strategy utiliza<br>interfaces para hacer que un conjunto de algoritmos sean<br>intercambiables.&nbsp; (Comportamiento)
Diga suo de Visitor, de que tipo es?	Permite separar algoritmos de los objetos sobre los que operan. Esto puede ser<br>útil cuando necesitan realizar operaciones sobre estos objetos sin alterar sus<br>clases.&nbsp; (Comportamiento)
Diga usos comunes de State, Strategy y Visitor.	• Uso común<br>– State: Cuando el comportamiento de un objeto debe cambiar<br>dinámicamente en función de su estado.<br>– Strategy: Cuando se necesita elegir entre varias<br>implementaciones de un algoritmo o comportamiento en<br>tiempo de ejecución.<br>– Visitor: Para realizar operaciones sobre una estructura de<br>objetos heterogéneos sin tener que modificar sus clases. Útil<br>para mantener la lógica de operación separada de la<br>estructura de objetos&nbsp;
